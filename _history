{"entries":[{"timestamp":1751459855402,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"C^zaU]%]g}j3fLlL0KZd\" x=\"20\" y=\"20"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start"],[0,"\"></"]],"start1":12,"start2":12,"length1":135,"length2":62},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," id=\"C=xr2T]]j`-{_qdhJnT-\" x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":49,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"//% weight=100 color=#0fbc11 icon=\"\\uf1eb\"\nnamespace SMPC {\n    export enum RadioMessage {\n        ImHere = 59049,\n        RUReal = 51673,\n        AndU = 54968,\n        Done = 52625,\n        Sure = 12631,\n        StillThere = 25073,\n        Yup = 31339,\n        AnyOneThere = 32263,\n        message1 = 49434\n    }\n\n    let LastConnection = 0\n    let Pic: Image[] = []\n    let MSG: number[] = []\n    let ComPry = -1\n    let Connected = -1\n    let ConnectedTo = -1\n    let ConnectingStage = -1\n    let Started = false\n\n    function ConnectingAttReset() {\n        basic.showLeds(`\n            # # # # #\n            . # . # .\n            . # . # .\n            . # . # .\n            # # # # #\n            `)\n        music._playDefaultBackground(music.builtInPlayableMelody(Melodies.PowerDown), music.PlaybackMode.UntilDone)\n        flashstorage.put(\"Disconnected\", \"1\")\n        control.reset()\n    }\n\n    function Lists() {\n        MSG = [\n            59049,\n            51673,\n            54968,\n            52625,\n            12631\n        ]\n        Pic = [\n            images.createImage(`\n            . . . . .\n            . . . . .\n            . . . . .\n            . . . . .\n            # # . . .\n            `),\n            images.createImage(`\n            . . . . .\n            . . . . .\n            . . . . .\n            . . . . .\n            # # # . .\n            `),\n            images.createImage(`\n            . . . . .\n            . . . . .\n            . . . . .\n            . . . . .\n            # # # # .\n            `),\n            images.createImage(`\n            . . . . .\n            . . . . .\n            . . . . .\n            . . . . .\n            # # # # #\n            `)\n        ]\n    }\n    radio.onReceivedMessage(RadioMessage.Sure, function () {\n        if (ConnectingStage == 2 && ConnectedTo == radio.receivedPacket(RadioPacketProperty.SerialNumber)) {\n            ConnectedTo = radio.receivedPacket(RadioPacketProperty.SerialNumber)\n            ConnectingStage = 3\n            Connected = 1\n            ComPry = 1\n            basic.showLeds(`\n                . # . . .\n                . . . . .\n                . . . . .\n                . . . . .\n                # # # # .\n                `)\n        }\n    })\n    radio.onReceivedMessage(RadioMessage.Yup, function () {\n        LastConnection = input.runningTime()\n        ConnectingStage = 4\n        Connected = 1\n    })\n    radio.onReceivedMessage(RadioMessage.Done, function () {\n        Connected = 1\n        ComPry = 0\n        Connecting(3, 0, radio.receivedPacket(RadioPacketProperty.SerialNumber), 4)\n    })\n    radio.onReceivedMessage(RadioMessage.ImHere, function () {\n        Connecting(1, 1, radio.receivedPacket(RadioPacketProperty.SerialNumber), 1)\n    })\n    radio.onReceivedMessage(RadioMessage.StillThere, function () {\n        Connected = 1\n        if (ConnectedTo == radio.receivedPacket(RadioPacketProperty.SerialNumber)) {\n            radio.sendMessage(RadioMessage.Yup)\n            ConnectedTo = radio.receivedPacket(RadioPacketProperty.SerialNumber)\n            LastConnection = input.runningTime()\n            ConnectingStage = 4\n            Connected = 1\n            ComPry = 0\n        }\n    })\n    function Connecting(NextCS: number, CP: number, CN: number, Radio: number) {\n        if ((NextCS == 1 || ConnectedTo == CN) && (ConnectingStage == NextCS - 1 && Started)) {\n            if (NextCS == 1) {\n                ComPry = CP\n                ConnectedTo = CN\n            }\n            music.play(music.tonePlayable(131, music.beat(BeatFraction.Eighth)), music.PlaybackMode.InBackground)\n            ConnectingStage = NextCS\n            Pic[NextCS - 1].showImage(0, 0)\n            led.plot(ComPry, 0)\n            basic.pause(100)\n            radio.sendMessage(MSG[Radio])\n            if (NextCS == 3) {\n                basic.pause(5000)\n            } else {\n                basic.pause(1000)\n            }\n            if (ConnectingStage == NextCS) {\n                music.play(music.tonePlayable(494, music.beat(BeatFraction.Double)), music.PlaybackMode.InBackground)\n                for (let index = 0; index <= 5; index++) {\n                    basic.showNumber(index)\n                    basic.pause(200)\n                    if (index == 5 && ConnectingStage == NextCS) {\n                        ConnectingAttReset()\n                    }\n                    if (Connected == 0 && ConnectingStage == NextCS) {\n                        radio.sendMessage(MSG[Radio])\n                        music.play(music.tonePlayable(262, music.beat(BeatFraction.Whole)), music.PlaybackMode.UntilDone)\n                    } else {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    radio.onReceivedMessage(RadioMessage.RUReal, function () {\n        Connecting(2, 0, radio.receivedPacket(RadioPacketProperty.SerialNumber), 2)\n    })\n    radio.onReceivedMessage(RadioMessage.AndU, function () {\n        Connecting(2, 1, radio.receivedPacket(RadioPacketProperty.SerialNumber), 3)\n    })\n    radio.onReceivedMessage(RadioMessage.AnyOneThere, function () {\n        Connecting(1, 0, radio.receivedPacket(RadioPacketProperty.SerialNumber), 0)\n    })\n\n    //% blockId=\"init smcp\" block=\"init smcp\"\n    //% shim=smcp::init\n    export function init() {\n        LastConnection = 0\n        Pic = []\n        MSG = []\n        ComPry = 0\n        Connected = 0\n        ConnectedTo = 0\n        ConnectingStage = 0\n        Started = false\n        if (flashstorage.getOrDefault(\"Disconnected\", \"0\") == \"0\") {\n            Started = false\n            Lists()\n            radio.setTransmitSerialNumber(true)\n            radio.setGroup(1)\n            ConnectingStage = 0\n            ConnectedTo = 0\n            Connected = 0\n            ComPry = -1\n            if (true) {\n                music._playDefaultBackground(music.builtInPlayableMelody(Melodies.Ringtone), music.PlaybackMode.InBackground)\n            }\n            images.createBigImage(`\n                # # # . # . . . # .\n                # . . . # # . # # .\n                # # # . # . # . # .\n                . . # . # . . . # .\n                # # # . # . . . # .\n                `).scrollImage(1, 100)\n            images.createBigImage(`\n                # # # . # # # . . .\n                # . . . # . # . . .\n                # . . . # # # . # #\n                # . . . # . . . . .\n                # # # . # . . . . .\n                `).scrollImage(1, 100)\n            images.createBigImage(`\n                # . . . . . . . . .\n                . # . . . . . . . .\n                # # # . . # . . . #\n                . # . . . . . . . .\n                # . . . . . . . . .\n                `).scrollImage(1, 100)\n            while (!(input.buttonIsPressed(Button.AB))) {\n                basic.showLeds(`\n                    . . . . .\n                    . . . . .\n                    # . . . #\n                    . . . . .\n                    . . . . .\n                    `)\n                basic.showLeds(`\n                    . . . . .\n                    . # . # .\n                    . . . . .\n                    . # . # .\n                    . . . . .\n                    `)\n            }\n            basic.showLeds(`\n                . . . . .\n                . . . . #\n                . . . # .\n                # . # . .\n                . # . . .\n                `)\n            Started = true\n        } else {\n            flashstorage.remove(\"Disconnected\")\n            flashstorage.put(\"Disconnected\", \"0\")\n            ConnectingStage = 0\n            ConnectedTo = 0\n            Connected = 0\n            ComPry = 0\n            radio.setTransmitSerialNumber(true)\n            radio.setGroup(1)\n            Lists()\n            basic.showLeds(`\n                # . . . #\n                . # . # .\n                . . # . .\n                . # . # .\n                # . . . #\n                `)\n            basic.pause(1000)\n            if (input.buttonIsPressed(Button.AB)) {\n                flashstorage.remove(\"Disconnected\")\n                control.reset()\n            }\n            Started = true\n        }\n    }\n\n    //% blockId=\"check connection\" block=\"check connection\"\n    //% shim=smcp::check\n    export function check() {\n        if (Connected == 1 && ComPry == 1) {\n            radio.sendMessage(RadioMessage.StillThere)\n        }\n        basic.pause(500)\n        if (Connected == 1 && (ConnectingStage == 4 && Started)) {\n            if (LastConnection + 5000 < input.runningTime()) {\n                ConnectingAttReset()\n            } else if (LastConnection + 1000 < input.runningTime()) {\n                music.play(music.tonePlayable(988, music.beat(BeatFraction.Whole)), music.PlaybackMode.UntilDone)\n            }\n        }\n    }\n\n    //% blockId=\"connect\" block=\"connect\"\n    //% shim=smcp::connect\n    export function connect() {\n        while (Connected == 0 && ConnectingStage == 0) {\n            flashstorage.remove(\"Disconnected\")\n            radio.sendMessage(RadioMessage.AnyOneThere)\n            basic.showLeds(`\n                . . . . #\n                . . # . #\n                # . # . #\n                . . # . #\n                . . . . #\n                `)\n            basic.pause(1000)\n            LastConnection = input.runningTime()\n        }\n        while (Connected != 1) {\n            basic.pause(1000)\n            LastConnection = input.runningTime()\n        }\n        LastConnection = input.runningTime()\n        Pic = []\n        MSG = []\n        basic.showLeds(`\n            # . . . #\n            . . . . .\n            . . . . .\n            . . . . .\n            # . . . #\n            `)\n        basic.pause(1000)\n        LastConnection = input.runningTime()\n    }\n\n}"],[1,"\n"]],"start1":0,"start2":0,"length1":9702,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"radio-broadcast\": \"*\",\n        \"microbit-pxt-flashstorage\": \"github:bsiever/microbit-pxt-flashstorage#v0.1.4\""],[0,"\n"],[1,""],[0,"    "]],"start1":146,"start2":146,"length1":129,"length2":9},{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":243,"start2":243,"length1":76,"length2":31}]},{"type":"added","filename":"test.ts","value":"// tests gaan hier; deze zal niet worden gecompileerd wanneer dit pakket wordt gebruikt als extensie.\n"}]}],"snapshots":[{"timestamp":1751459855401,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"SMCP - Extention V2\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1751460025210}